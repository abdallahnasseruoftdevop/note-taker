// Import required Node.js modules
const fs = require("fs")
const { v4: uuid } = require('uuid')
const path = require("path")

// Define API endpoints for getting, adding, and deleting notes
module.exports = function(app){

// GET endpoint to retrieve all notes stored in 'db.json'
app.get("/api/notes", (req, res) => {
res.sendFile(path.join(__dirname, "../db/db.json"))
})

// POST endpoint to add a new note to 'db.json'
app.post("/api/notes", (req, res) => {
// Create a new note object with a unique id generated by uuid.v4()
let newNote = {
id: uuid(),
title: req.body.title,
text: req.body.text
}


// Read existing notes from 'db.json'
let oldNote = JSON.parse(fs.readFileSync(path.join(__dirname,"../db/db.json"),"utf-8"))

// Add the new note to the array of existing notes
oldNote.push(newNote)

// Write the updated notes to 'db.json'
fs.writeFileSync("./db/db.json", JSON.stringify(oldNote))

// Send the updated notes back to the client as a JSON response
res.json(oldNote)
})

// DELETE endpoint to delete a note with a given id
app.delete("/api/notes/:id", (req, res) => {
// Get the id of the note to be deleted from the request parameters
let chosenId = req.params.id


// Read existing notes from 'db.json'
let oldNote = JSON.parse(fs.readFileSync(path.join(__dirname,"../db/db.json"),"utf-8"))

// Filter the array of notes to exclude the note with the given id
const newNote = oldNote.filter(note => note.id != chosenId)

// Write the updated notes to 'db.json'
fs.writeFileSync("./db/db.json", JSON.stringify(newNote))

// Send the updated notes back to the client as a response
res.send(newNote)
})
}